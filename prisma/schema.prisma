// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  // the output is a recommandation from prisma documentation , especially for the next ORM7, instead of the nestJS documentation we follow prisma documentation
  output   = "../generated/prisma"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  role          Role @default(PATIENT)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isResetPassword Boolean  @default(false)
  resetPasswordToken String? @unique
  healthEntries       HealthEntry[]
  notes               Note[]
  documents           Document[]

  treatments          Treatment[] 


  appointments        Appointment[]
}
model HealthEntry {
  id         String   @id @default(uuid())
  global  Int
  physical  Int
  mental Int
  feeling       String?
  description   String?
  limbs    String?
  createdAt  DateTime @default(now()) 
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, createdAt], name: "unique_user_daily_entry")
}

model Treatment {
  id           String   @id @default(uuid())
  date DateTime?
description  String?
  title        String
  type String?
  frequency Int?
  DuringMeal Boolean?
  DuringMorning Boolean?
  DuringMidday Boolean?
  DuringEvening Boolean?

 
  
  createdAt    DateTime @default(now())
  patientId    String
  patient      User     @relation(fields: [patientId], references: [id])
  createdById  String

}
model Appointment {
  id        String   @id @default(uuid())
  dateTime  DateTime
  createdAt DateTime @default(now())
  contact   Contact?  @relation(fields: [contactId], references: [id])
  contactId String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
model Contact {
  id        String   @id @default(uuid())
  contactName  String
  firstName String?
  lastName  String?
  profession String?
  phone     String?
  email     String?

  createdAt DateTime @default(now())
  appointments Appointment[]
}
model Note {
  id        String   @id @default(uuid())
  title     String
  note   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
model Document {
  id         String   @id @default(uuid())
  name       String
  url        String
  uploadedAt DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}


enum Role {
  PATIENT
  ADMIN
}